const Message = require('../models/Message');
const User = require('../models/User');
const logger = require('../utils/logger');
const { validationResult } = require('express-validator');

// Get or create a conversation between two users
exports.getOrCreateConversation = async (req, res) => {
  try {
    const { userId } = req.params;
    const currentUserId = req.user.id;

    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'User ID is required'
      });
    }

    if (parseInt(userId) === currentUserId) {
      return res.status(400).json({
        success: false,
        error: 'Cannot create a conversation with yourself'
      });
    }

    // Get or create conversation
    const conversationId = await Message.getOrCreateConversation(currentUserId, userId);
    
    res.json({
      success: true,
      data: { conversationId }
    });
  } catch (error) {
    logger.error('Error getting or creating conversation:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get or create conversation'
    });
  }
};

// Get messages in a conversation
exports.getMessages = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const { before, limit = 50 } = req.query;

    if (!conversationId) {
      return res.status(400).json({
        success: false,
        error: 'Conversation ID is required'
      });
    }

    const messages = await Message.getByConversation(conversationId, { 
      before: before ? parseInt(before) : null, 
      limit: parseInt(limit) 
    });
    
    res.json({
      success: true,
      data: messages
    });
  } catch (error) {
    logger.error('Error fetching messages:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch messages'
    });
  }
};

// Get user's conversations
exports.getConversations = async (req, res) => {
  try {
    const { limit = 20, offset = 0 } = req.query;
    
    const conversations = await Message.getUserConversations(req.user.id, { 
      limit: parseInt(limit), 
      offset: parseInt(offset) 
    });
    
    res.json({
      success: true,
      data: conversations
    });
  } catch (error) {
    logger.error('Error fetching conversations:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch conversations'
    });
  }
};

// Send a message
exports.sendMessage = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      success: false,
      errors: errors.array()
    });
  }

  try {
    const { conversationId, content, messageType = 'text', parentMessageId } = req.body;
    const senderId = req.user.id;

    // Create the message
    const message = await Message.create({
      senderId,
      conversationId,
      content,
      messageType,
      parentMessageId
    });

    // Get conversation participants to update their unread counts
    const participants = await Message.getConversationParticipants(conversationId);
    
    // Mark message as read for the sender
    await Message.markAsRead(conversationId, senderId, message.id);

    res.status(201).json({
      success: true,
      data: message
    });
  } catch (error) {
    logger.error('Error sending message:', error);
    const status = error.statusCode || 500;
    res.status(status).json({
      success: false,
      error: error.message || 'Failed to send message'
    });
  }
};

// Mark messages as read
exports.markAsRead = async (req, res) => {
  try {
    const { conversationId, messageId } = req.body;
    const userId = req.user.id;

    if (!conversationId) {
      return res.status(400).json({
        success: false,
        error: 'Conversation ID is required'
      });
    }

    await Message.markAsRead(conversationId, userId, messageId || null);
    
    res.json({
      success: true,
      data: { conversationId, messageId }
    });
  } catch (error) {
    logger.error('Error marking messages as read:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to mark messages as read'
    });
  }
};

// Edit a message
exports.editMessage = async (req, res) => {
  try {
    const { messageId } = req.params;
    const { content } = req.body;
    const userId = req.user.id;

    if (!messageId) {
      return res.status(400).json({
        success: false,
        error: 'Message ID is required'
      });
    }

    if (!content || content.trim() === '') {
      return res.status(400).json({
        success: false,
        error: 'Message content is required'
      });
    }

    const message = await Message.edit(messageId, content, userId);
    
    if (!message) {
      return res.status(404).json({
        success: false,
        error: 'Message not found or not authorized'
      });
    }

    res.json({
      success: true,
      data: message
    });
  } catch (error) {
    logger.error('Error editing message:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to edit message'
    });
  }
};

// Delete a message
exports.deleteMessage = async (req, res) => {
  try {
    const { messageId } = req.params;
    const userId = req.user.id;

    if (!messageId) {
      return res.status(400).json({
        success: false,
        error: 'Message ID is required'
      });
    }

    const result = await Message.delete(messageId, userId);
    
    if (!result) {
      return res.status(404).json({
        success: false,
        error: 'Message not found or not authorized'
      });
    }

    res.json({
      success: true,
      data: { messageId }
    });
  } catch (error) {
    logger.error('Error deleting message:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to delete message'
    });
  }
};

// Add or remove a reaction to a message
exports.reactToMessage = async (req, res) => {
  try {
    const { messageId } = req.params;
    const { emoji, action = 'add' } = req.body;
    const userId = req.user.id;

    if (!messageId || !emoji) {
      return res.status(400).json({
        success: false,
        error: 'Message ID and emoji are required'
      });
    }

    let result;
    
    if (action === 'add') {
      result = await Message.addReaction(messageId, userId, emoji);
    } else if (action === 'remove') {
      result = await Message.removeReaction(messageId, userId, emoji);
    } else {
      return res.status(400).json({
        success: false,
        error: 'Invalid action. Must be "add" or "remove"'
      });
    }

    if (!result && action === 'add') {
      return res.status(400).json({
        success: false,
        error: 'Failed to add reaction'
      });
    }

    res.json({
      success: true,
      data: { messageId, emoji, action }
    });
  } catch (error) {
    logger.error('Error updating reaction:', error);
    res.status(500).json({
      success: false,
      error: `Failed to ${req.body.action || 'update'} reaction`
    });
  }
};

// Get message reactions
exports.getMessageReactions = async (req, res) => {
  try {
    const { messageId } = req.params;

    if (!messageId) {
      return res.status(400).json({
        success: false,
        error: 'Message ID is required'
      });
    }

    const reactions = await Message.getReactions(messageId);
    
    res.json({
      success: true,
      data: reactions
    });
  } catch (error) {
    logger.error('Error fetching message reactions:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch message reactions'
    });
  };